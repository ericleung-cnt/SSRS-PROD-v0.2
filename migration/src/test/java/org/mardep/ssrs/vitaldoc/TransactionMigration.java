package org.mardep.ssrs.vitaldoc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Properties;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import migration.CodeTable;
import migration.Exporter;

//@RunWith(SpringJUnit4ClassRunner.class)
//@ContextConfiguration(locations = "classpath:/test-context.xml")
public class TransactionMigration {

	@Autowired
	IVitalDocClient vd;
	private Properties properties;
	
	public TransactionMigration() throws FileNotFoundException, IOException {
		String property = System.getProperty("migration.properties");
		properties = new Properties();
		try (InputStream stream = (property != null) ? new FileInputStream(property) : CodeTable.class
				.getResourceAsStream("/migration.properties")) {
			properties.load(stream);
		}
	}

	/**
	 * read csv generated by readOracle() and write to sqlserver
	 * @throws SQLException
	 * @throws IOException
	 * @throws ClassNotFoundException
	 * @throws InstantiationException
	 * @throws IllegalAccessException
	 * @throws ParseException
	 */
	@Test
	public void read() throws SQLException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, ParseException {

		String driverClass = properties.getProperty("CodeTable.insertOrUpdate.driverClass", "");
		String url = properties.getProperty("CodeTable.insertOrUpdate.url", "");
		String user = properties.getProperty("CodeTable.insertOrUpdate.user", "");
		String pwd = properties.getProperty("CodeTable.insertOrUpdate.pwd", "");

		
		Exporter exporter = new Exporter();
		try {
			exporter.write(driverClass, url, user, pwd);
		} finally {
			exporter.sqlserver.close();
		}
	}

	/**
	 * read ship reg transaction data from oracle and write to csv
	 * @throws SQLException
	 * @throws IOException
	 * @throws ClassNotFoundException
	 * @throws InstantiationException
	 * @throws IllegalAccessException
	 * @throws ParseException
	 */
	@Test
	public void readOracle() throws SQLException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, ParseException {
		String driverClass = properties.getProperty("CodeTable.driverClass");
		String orclUrl = properties.getProperty("CodeTable.orclUrl");
		String orclUser = properties.getProperty("CodeTable.orclUser");
		String orclPwd = properties.getProperty("CodeTable.orclPwd");

		new Exporter().readDb(driverClass, orclUrl, orclUser, orclPwd);
	}

}
